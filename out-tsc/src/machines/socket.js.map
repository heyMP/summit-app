{"version":3,"file":"socket.js","sourceRoot":"","sources":["../../../src/machines/socket.ts"],"names":[],"mappings":"AAEA,OAAO,EAAE,eAAe,EAAE,MAAM,aAAa,CAAC;AAa9C;;GAEG;AACH,MAAM,CAAC,MAAM,cAAc,GAAyC,CAAC,OAAO,EAAE,KAAK,EAAE,EAAE,CAAC,CAAC,IAAI,EAAE,QAAQ,EAAG,EAAE;IAC3G,IAAI,MAAgB,CAAC;IACrB,MAAM,UAAU,GAAU,IAAI,CAAC;IAC/B,MAAM,QAAQ,GAAU,EAAE,CAAC;IAC3B,IAAI,YAAgB,CAAC;IACrB,IAAI,UAAU,GAAU,CAAC,CAAC;IAE1B,MAAM,mBAAmB,GAAG,GAAG,EAAE;QAChC,IAAI,CAAC,MAAM,EAAE;YACZ,OAAO;SACP;QAED,IAAI,IAAI,GAAG,EAAE,CAAC;QAEd,oCAAoC;QACpC,MAAM,cAAc,GAAG,eAAe,EAAE,CAAC;QACzC,IAAI,cAAc,CAAC,IAAI,CAAC,EAAE,IAAI,cAAc,CAAC,MAAM,CAAC,MAAM,IAAI,cAAc,CAAC,MAAM,CAAC,QAAQ,EAAE;YAC7F,IAAI,GAAG,cAAc,CAAC;SACtB;QAED,4BAA4B;QAC5B,MAAM,OAAO,GAAG;YACf,IAAI,EAAE,YAAY;YAClB,IAAI;SACJ,CAAC;QAEF,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC,CAAC;IACtC,CAAC,CAAA;IAED,MAAM,OAAO,GAAG,GAAG,EAAE;QACpB,MAAM,GAAG,IAAI,SAAS,CAAC,qBAAqB,CAAC,CAAC;QAE9C,MAAM,CAAC,MAAM,GAAG,KAAK,CAAC,EAAE;YACvB,OAAO,CAAC,GAAG,CAAC,kBAAkB,CAAC,CAAC;YAChC,UAAU,GAAG,CAAC,CAAC;YAEf,IAAI,YAAY,EAAE;gBACjB,YAAY,CAAC,YAAY,CAAC,CAAC;aAC3B;YAED,mBAAmB,EAAE,CAAC;QACvB,CAAC,CAAC;QAEF,MAAM,CAAC,SAAS,GAAG,KAAK,CAAC,EAAE;YAC1B,MAAM,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;YACpC,QAAQ,IAAI,CAAC,IAAI,EAAE;gBAClB,KAAK,MAAM;oBACV,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;oBACpB,MAAM;gBAEP,KAAK,eAAe;oBACnB,IAAI,CAAC,IAA0B,CAAC,CAAC;oBACjC,MAAM;gBAEP;oBACC,MAAM;aACP;QACF,CAAC,CAAC;QAEF,MAAM,CAAC,OAAO,GAAG,KAAK,CAAC,EAAE;YACxB,UAAU,EAAE,CAAC;YAEb,IAAI,UAAU,KAAK,QAAQ,EAAE;gBAC5B,gEAAgE;gBAChE,OAAO;aACP;YAED,YAAY,GAAG,UAAU,CAAC,GAAG,EAAE;gBAC9B,OAAO,CAAC,GAAG,CAAC,yBAAyB,UAAU,EAAE,CAAC,CAAC;gBACnD,OAAO,EAAE,CAAC;YACX,CAAC,EAAE,UAAU,CAAC,CAAC;QAChB,CAAC,CAAC;QAEF,MAAM,CAAC,OAAO,GAAG,KAAK,CAAC,EAAE;QACzB,CAAC,CAAC;IACH,CAAC,CAAA;IAED,OAAO,EAAE,CAAC;IAEV,OAAO,GAAG,EAAE;QACX,MAAM,CAAC,KAAK,EAAE,CAAC;QACf,IAAI,YAAY,EAAE;YACjB,YAAY,CAAC,YAAY,CAAC,CAAC;SAC3B;IACF,CAAC,CAAA;AACF,CAAC,CAAA","sourcesContent":["import type { InvokeCreator } from 'xstate';\nimport type { AppEvents, AppContext } from '../store.js';\nimport { getLocalStorage } from '../store.js';\n\nexport type ConfigurationEvent = {\n\ttype: 'CONFIGURATION',\n\tgame: {\n\t\tid: string\n\t},\n\tplayer: {\n\t\tuserid: string,\n\t\tusername: string\n\t}\n}\n\n/**\n * XState Invoke Callback\n */\nexport const socketCallback: InvokeCreator<AppContext, AppEvents> = (context, event) => (send, receieve)  => {\n\tlet socket:WebSocket;\n\tconst retryDelay:number = 5000;\n\tconst maxTries:number = 50;\n\tlet retryTimeout:any;\n\tlet numRetries:number = 0;\n\n\tconst sendConnectionFrame = () => {\n\t\tif (!socket) {\n\t\t\treturn;\n\t\t}\n\n\t\tlet data = {};\n\n\t\t// get a previously connected player\n\t\tconst previousPlayer = getLocalStorage();\n\t\tif (previousPlayer.game.id && previousPlayer.player.userid && previousPlayer.player.username) {\n\t\t\tdata = previousPlayer;\n\t\t}\n\n\t\t// send a \"CONNECTION\" frame\n\t\tconst message = {\n\t\t\ttype: \"CONNECTION\",\n\t\t\tdata\n\t\t};\n\n\t\tsocket.send(JSON.stringify(message));\n\t}\n\n\tconst connect = () => {\n\t\tsocket = new WebSocket(\"ws://localhost:8080\");\n\n\t\tsocket.onopen = event => {\n\t\t\tconsole.log(\"socket connected\");\n\t\t\tnumRetries = 0;\n\n\t\t\tif (retryTimeout) {\n\t\t\t\tclearTimeout(retryTimeout);\n\t\t\t}\n\n\t\t\tsendConnectionFrame();\n\t\t};\n\n\t\tsocket.onmessage = event => {\n\t\t\tconst data = JSON.parse(event.data);\n\t\t\tswitch (data.type) {\n\t\t\t\tcase \"PING\":\n\t\t\t\t\tconsole.log(\"ping\");\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase \"CONFIGURATION\":\n\t\t\t\t\tsend(data as ConfigurationEvent);\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t};\n\n\t\tsocket.onclose = event => {\n\t\t\tnumRetries++;\n\n\t\t\tif (numRetries === maxTries) {\n\t\t\t\t// show some error message that the user should refresh the page\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tretryTimeout = setTimeout(() => {\n\t\t\t\tconsole.log(`socket reconnect try: ${numRetries}`);\n\t\t\t\tconnect();\n\t\t\t}, retryDelay);\n\t\t};\n\n\t\tsocket.onerror = error => {\n\t\t};\n\t}\n\n\tconnect();\n\n\treturn () => {\n\t\tsocket.close();\n\t\tif (retryTimeout) {\n\t\t\tclearTimeout(retryTimeout);\n\t\t}\n\t}\n}"]}